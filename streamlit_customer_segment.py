# import libraries
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from sklearn import metrics
import joblib
from sklearn.cluster import KMeans
import plotly.express as px
from sklearn.metrics import silhouette_score
import seaborn as sns



st.title("Data Science")
st.write("## Customer Segment Project")



menu = ["Overview", "Product Insights", "Build Project", "New Prediction"]
choice = st.sidebar.selectbox('Menu', menu)
# Th√¥ng tin nh√≥m th·ª±c hi·ªán trong sidebar
st.sidebar.markdown(" \n")  
st.sidebar.markdown(" \n") 
st.sidebar.markdown(" \n") 
st.sidebar.markdown("---")  
st.sidebar.markdown("### üë• Project Members:")
st.sidebar.markdown("- Tr·∫ßn Hi·ªÉu BƒÉng  \n- Mai H·ªìng H√†")

st.sidebar.markdown("üë©‚Äçüè´ **Instructor:**  \nC√¥ Khu·∫•t Th√πy Ph∆∞∆°ng")

st.sidebar.markdown("üìÖ **Date of Submission:**  \n20/04/2025")


df = pd.read_csv("df_no_outliers_with_no.csv")
# Load scaler v√† model
def load_model():
    scaler = joblib.load("scaler.pkl")
    model = joblib.load("kmeans_model.pkl")
    return scaler, model
scaler, model = load_model()
if choice == 'Overview':    
    st.subheader("Overview")
    st.write("""
    #### Company Overview:
    Store X in the U.S. primarily sells essential products to customers, including vegetables, fruits, meat, fish, eggs, dairy, and beverages. The store's customers are retail buyers.
    The owner of Store X wants to increase sales, introduce products to the right target customers, and provide excellent customer service to enhance customer satisfaction.
    """)  
    st.image("X_image.png", caption="Store X Overview", use_container_width=True)
    st.write("""
    #### Problem to Address:
    Develop a customer segmentation system based on the information provided by the store.
    """)  

elif choice == 'Product Insights':
    st.title("üì¶ Ph√¢n t√≠ch S·∫£n ph·∫©m & Giao d·ªãch")
    
    try:
        # ƒê·ªçc d·ªØ li·ªáu
        import pandas as pd
        products = pd.read_csv("Products_with_Categories.csv")
        transactions = pd.read_csv("Transactions.csv")

        # G·ªôp 2 b·∫£ng
        dff = transactions.merge(products, on="productId", how="left")
        dff["Revenue"] = dff["items"] * dff["price"]
        # Ki·ªÉm tra v√† ƒë·ªçc c·ªôt Date
        if "Date" in dff.columns:
            dff["Date"] = pd.to_datetime(dff["Date"], format="%d-%m-%Y", errors="coerce")  # Chuy·ªÉn sang datetime
            dff["Month"] = dff["Date"].dt.to_period("M").astype(str)    # L·∫•y th√°ng
            dff["Weekday"] = dff["Date"].dt.day_name()                  # L·∫•y th·ª© trong tu·∫ßn
        else:
            print("C·ªôt 'Date' kh√¥ng t·ªìn t·∫°i trong dataframe.")



        # Ch·ªçn ph·∫ßn ph√¢n t√≠ch
        analysis_type = st.radio("üîé Ch·ªçn lo·∫°i ph√¢n t√≠ch:", [
            "T·ªïng quan d·ªØ li·ªáu", "Top s·∫£n ph·∫©m b√°n ch·∫°y","Top s·∫£n ph·∫©m b√°n k√©m",
            "Doanh thu theo danh m·ª•c", "Ph√¢n b·ªë gi√° s·∫£n ph·∫©m",  "S·ªë l∆∞·ª£ng b√°n theo th√°ng", "S·ªë l∆∞·ª£ng b√°n theo th·ª© trong tu·∫ßn"
        ])

        # 1. T·ªïng quan d·ªØ li·ªáu
        if analysis_type == "T·ªïng quan d·ªØ li·ªáu":
            st.subheader("üìã Dataset (Top 10)")
            st.dataframe(dff.head(10))
            st.write(f"üî¢ T·ªïng s·ªë giao d·ªãch: {len(dff)}")
            st.write(f"üì¶ S·ªë l∆∞·ª£ng s·∫£n ph·∫©m kh√°c nhau: {dff['productName'].nunique()}")
            st.write(f"üìÇ S·ªë danh m·ª•c: {dff['Category'].nunique()}")

        # 2. Top s·∫£n ph·∫©m b√°n ch·∫°y
        elif analysis_type == "Top s·∫£n ph·∫©m b√°n ch·∫°y":
            top_products = dff.groupby("productName")["items"].sum().sort_values(ascending=False).head(10)
            fig, ax = plt.subplots()
            top_products.plot(kind="barh", color="skyblue", ax=ax)
            ax.set_title("Top 10 s·∫£n ph·∫©m b√°n ch·∫°y")
            ax.set_xlabel("S·ªë l∆∞·ª£ng b√°n")
            ax.invert_yaxis()
            st.pyplot(fig)
        
        # 3. Top s·∫£n ph·∫©m b√°n ch·∫°y
        elif analysis_type == "Top s·∫£n ph·∫©m b√°n k√©m":
            bottom = dff.groupby("productName")["items"].sum().sort_values().head(10)
            fig, ax = plt.subplots()
            bottom.plot(kind="barh", color="skyblue", ax=ax)
            ax.set_title("Top 10 s·∫£n ph·∫©m b√°n k√©m nh·∫•t")
            ax.set_xlabel("S·ªë l∆∞·ª£ng b√°n")
            ax.invert_yaxis()
            st.pyplot(fig)

        # . Doanh thu theo danh m·ª•c
        elif analysis_type == "Doanh thu theo danh m·ª•c":
            rev_by_cat = dff.groupby("Category")["Revenue"].sum().sort_values(ascending=False)
            fig, ax = plt.subplots()
            rev_by_cat.plot(kind="barh", color="coral", ax=ax)
            ax.set_title("T·ªïng doanh thu theo danh m·ª•c")
            ax.set_xlabel("Doanh thu")
            ax.set_ylabel("Danh m·ª•c")
            #plt.xticks(rotation=45)
            st.pyplot(fig)

        # 4. Ph√¢n b·ªë gi√° s·∫£n ph·∫©m
        elif analysis_type == "Ph√¢n b·ªë gi√° s·∫£n ph·∫©m":
            fig, ax = plt.subplots()
            sns.histplot(products["price"], bins=30, kde=True, color="green", ax=ax)
            ax.set_title("Ph√¢n b·ªë gi√° s·∫£n ph·∫©m")
            st.pyplot(fig)

        elif analysis_type == "S·ªë l∆∞·ª£ng b√°n theo th√°ng":
            monthly_sales = dff.groupby("Month")["items"].sum().sort_index()
            fig, ax = plt.subplots()
            monthly_sales.plot(kind="bar", color="blue", ax=ax)
            ax.set_title("T·ªïng s·ªë l∆∞·ª£ng b√°n theo th√°ng")
            ax.set_ylabel("S·ªë l∆∞·ª£ng")
            ax.set_xlabel("Th√°ng")
            #plt.xticks(rotation=45)
            st.pyplot(fig)


        elif analysis_type == "S·ªë l∆∞·ª£ng b√°n theo th·ª© trong tu·∫ßn":
            weekday_order = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
            weekday_sales = dff.groupby("Weekday")["items"].sum().reindex(weekday_order)
            fig, ax = plt.subplots()
            weekday_sales.plot(kind="bar", color="orange", ax=ax)
            ax.set_title("T·ªïng s·ªë l∆∞·ª£ng b√°n theo th·ª© trong tu·∫ßn")
            ax.set_ylabel("S·ªë l∆∞·ª£ng")
            plt.xticks(rotation=30)
            st.pyplot(fig)



    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {e}")

elif choice == 'Build Project':
    st.subheader("Build Project")
    st.write("#### Data Preprocessing")
    
    
# Chu·∫©n h√≥a v√† d·ª± ƒëo√°n
    X_scaled = scaler.transform(df[["Recency", "Frequency", "Monetary"]])
    df["Cluster"] = model.predict(X_scaled)
    st.write("##### Show data:")
    st.dataframe(df[["Recency", "Frequency", "Monetary"]].head())
    st.write("#### Elbow Method:")
    distortions = []
    K = range(1, 11)
    for k in K:
        kmeanModel = KMeans(n_clusters=k, random_state=42)
        kmeanModel.fit(X_scaled)
        distortions.append(kmeanModel.inertia_)

    fig1, ax1 = plt.subplots()
    ax1.plot(K, distortions, 'bo-')
    ax1.set_xlabel("S·ªë c·ª•m (k)")
    ax1.set_ylabel("Distortion (Inertia)")
    ax1.set_title("Ph∆∞∆°ng ph√°p Elbow")
    st.pyplot(fig1)
    
    # --- Ph·∫ßn Silhouette Analysis ---
    st.write("#### Silhouette Analysis:")

    silhouette_scores = []
    K2 = range(2, 11)
    for k in K2:
        kmeanModel = KMeans(n_clusters=k, random_state=42)
        kmeanModel.fit(X_scaled)
        score = silhouette_score(X_scaled, kmeanModel.labels_)
        silhouette_scores.append(score)

    fig2, ax2 = plt.subplots()
    ax2.plot(K2, silhouette_scores, 'bo-')
    ax2.set_xlabel("S·ªë c·ª•m (k)")
    ax2.set_ylabel("Silhouette Score")
    ax2.set_title("Silhouette Analysis")
    st.pyplot(fig2)

    st.write("#### Treemap (with k = 5):")
    summary = df.groupby("Cluster").agg({
    "Recency": "mean",
    "Frequency": "mean",
    "Monetary": "mean"
    }).round(0)

    summary["Customer Count"] = df["Cluster"].value_counts()
    summary["Percentage"] = (summary["Customer Count"] / summary["Customer Count"].sum() * 100).round(2)

    summary = summary.reset_index()

    # T·∫°o label ƒë·∫πp ƒë·ªÉ hi·ªÉn th·ªã trong t·ª´ng √¥ Treemap
    summary["label"] = summary.apply(
        lambda row: f"Cluster {int(row['Cluster'])}<br>"
                f"{int(row['Recency'])} days<br>"
                f"{int(row['Frequency'])} orders<br>"
                f"{int(row['Monetary'])} $<br>"
                f"{int(row['Customer Count'])} customers ({row['Percentage']}%)",
        axis=1
        )

    # V·∫Ω treemap

    fig_treemap = px.treemap(
    summary,
    path=["label"],
    values="Customer Count",
    color="Monetary",
    color_continuous_scale="RdBu"
)
    st.plotly_chart(fig_treemap, use_container_width=True)
    # V·∫Ω Scatter plot
    scatter_data = summary[["Cluster", "Recency", "Frequency", "Monetary"]].rename(columns={
    "Recency": "RecencyMean",
    "Frequency": "FrequencyMean",
    "Monetary": "MonetaryMean"
})
    scatter_data["Cluster"] = scatter_data["Cluster"].astype(str)

    fig3 = px.scatter(
    scatter_data,
    x="RecencyMean",
    y="MonetaryMean",
    color="Cluster",
    size="FrequencyMean",
    hover_data=["RecencyMean", "FrequencyMean", "MonetaryMean"],
    template="plotly_white",
    title="Scatter Plot",
    size_max=40,
)
    st.plotly_chart(fig3, use_container_width=True)

elif choice == 'New Prediction':
    # T·∫°o d·ªØ li·ªáu cho b·∫£ng
    data = {
    "Cluster Number": [0, 1, 2, 3, 4],
    "Customer Segment": [
        "Loyal Customers",    # C·ª•m 0
        "Lost Customers",     # C·ª•m 1
        "VIP Customers",      # C·ª•m 2
        "Dormant Customers",  # C·ª•m 3
        "Potential Loyalists" # C·ª•m 4
    ],
    "Characteristics": [
        "Low recency, fairly frequent, moderate-high spending",   # C·ª•m 0
        "Very high recency, low frequency, low spending",         # C·ª•m 1
        "Low recency, high frequency, high spending",             # C·ª•m 2
        "Moderately high recency, moderate frequency, moderate spending",  # C·ª•m 3
        "Moderate recency, low frequency, low spending (potential to buy more)" # C·ª•m 4
    ]}


    # T·∫°o DataFrame t·ª´ data
    df_segments = pd.DataFrame(data)

    cluster_strategies = {
    0: {
        "title": "Loyal Customers ü´∂",
        "color": "#d1e7dd",
        "strategy": [
            "Duy tr√¨ chƒÉm s√≥c ƒë·ªãnh k·ª≥.",
            "Cung c·∫•p m√£ gi·∫£m gi√° nh·ªè ƒë·ªÉ gi·ªØ ch√¢n.",
            "M·ªùi ƒë√°nh gi√°/chia s·∫ª tr·∫£i nghi·ªám."
        ]
    },
    1: {
        "title": "Lost Customers üòû",
        "color": "#f8d7da",
        "strategy": [
            "G·ª≠i email nh·∫Øc nh·ªü, ∆∞u ƒë√£i quay l·∫°i.",
            "Kh·∫£o s√°t l√Ω do b·ªè ƒëi.",
            "Ch·∫°y remarketing (Facebook/Google Ads)."
        ]
    },
    2: {
        "title": "VIP Customers üòé",
        "color": "#e0f7fa",
        "strategy": [
            "T·∫∑ng ∆∞u ƒë√£i VIP, quy·ªÅn truy c·∫≠p s·ªõm s·∫£n ph·∫©m m·ªõi.",
            "M·ªùi tham gia ch∆∞∆°ng tr√¨nh Beta/C√¢u l·∫°c b·ªô.",
            "L·∫•y feedback d·ªãch v·ª•, c√° nh√¢n h√≥a chƒÉm s√≥c."
        ]
    },
    3: {
        "title": "Dormant Customers üí§",
        "color": "#fff3cd",
        "strategy": [
            "G·ª≠i th√¥ng b√°o khuy·∫øn m√£i gi·ªõi h·∫°n.",
            "G·ª£i √Ω s·∫£n ph·∫©m ƒë√£ t·ª´ng xem/mua.",
            "Khuy·∫øn kh√≠ch t∆∞∆°ng t√°c l·∫°i qua email/app."
        ]
    },
    4: {
        "title": "Potential Loyalists üöÄ",
        "color": "#cfe2ff",
        "strategy": [
            "Theo d√µi h√†nh vi mua ƒë·ªÉ ƒë·∫©y khuy·∫øn m√£i ƒë√∫ng l√∫c.",
            "∆Øu ƒë√£i mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn.",
            "K√≠ch ho·∫°t th√¥ng qua loyalty point."
        ]
    }
}
    def show_cluster_strategy(cluster_id):
        info = cluster_strategies.get(cluster_id)
        if info:
            st.subheader(f"üéØ Strategy for {info['title']}")
            for point in info["strategy"]:
                st.markdown(f"- {point}")


    # Hi·ªÉn th·ªã b·∫£ng trong Streamlit
    st.markdown("### 1Ô∏è‚É£ Customer Segments")
    st.table(df_segments)
    # Ch·ªçn data
    # === 2. D·ª± ƒëo√°n theo slider (Recency, Frequency, Monetary) ===
    st.markdown("### 2Ô∏è‚É£ Predict using sliders")
    name = st.text_input("Name of Customer")

    recency_val = st.slider("Recency", int(df["Recency"].min()), int(df["Recency"].max()), int(df["Recency"].min()))
    frequency_val = st.slider("Frequency", int(df["Frequency"].min()), int(df["Frequency"].max()), int(df["Frequency"].min()))
    monetary_val = st.slider("Monetary", float(df["Monetary"].min()), float(df["Monetary"].max()), float(df["Monetary"].min()))

    new_data = pd.DataFrame({
        "Recency": [recency_val],
        "Frequency": [frequency_val],
        "Monetary": [monetary_val]
    })
    st.write("### D·ªØ li·ªáu ng∆∞·ªùi d√πng nh·∫≠p:")
    st.dataframe(new_data)

    # D·ª± ƒëo√°n v√† l∆∞u v√†o session_state
    data_scaled_slider = scaler.transform(new_data)
    predicted_cluster_slider = model.predict(data_scaled_slider)[0]
    segment_slider = df_segments.loc[df_segments["Cluster Number"] == predicted_cluster_slider, "Customer Segment"].values[0]

    st.write("### D·ª± ƒëo√°n c·ª•m kh√°ch h√†ng:")
    st.write(f"Customer belongs to Cluster {predicted_cluster_slider} - {segment_slider}.")

    if st.button("Hi·ªÉn th·ªã chi·∫øn l∆∞·ª£c kinh doanh", key="strategy_slider"):
        show_cluster_strategy(predicted_cluster_slider)

    # === 3. D·ª± ƒëo√°n theo Member_number ===
    st.markdown("### 3Ô∏è‚É£ Predict using Member_number")
    st.subheader("Nh·∫≠p Member_number")
    min_member = int(df["Member_number"].min())
    max_member = int(df["Member_number"].max())

    member_val = st.number_input(
        "Member_number (t·ª´ {} ƒë·∫øn {})".format(min_member, max_member),
        min_value=min_member,
        max_value=max_member,
        value=min_member,
        step=1
    )

    st.write(f"B·∫°n ƒë√£ nh·∫≠p Member_number: {member_val}")

    if st.button("Xem th√¥ng tin & D·ª± ƒëo√°n", key="member_button"):
        member_data = df[df["Member_number"] == member_val]

        if not member_data.empty:
            data_to_scale = member_data[["Recency", "Frequency", "Monetary"]]
            scaled_data = scaler.transform(data_to_scale)
            predicted_cluster_member = model.predict(scaled_data)[0]

            row_segment = df_segments.loc[df_segments["Cluster Number"] == predicted_cluster_member, "Customer Segment"]
            segment_name = row_segment.values[0] if not row_segment.empty else "Unknown"

            # L∆∞u v√†o session
            st.session_state["member_data"] = member_data
            st.session_state["predicted_cluster_member"] = predicted_cluster_member
            st.session_state["segment_name"] = segment_name
        else:
            st.session_state["member_data"] = None
            st.session_state["predicted_cluster_member"] = None
            st.session_state["segment_name"] = None

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n (n·∫øu ƒë√£ l∆∞u tr∆∞·ªõc ƒë√≥)
    if "member_data" in st.session_state and st.session_state["member_data"] is not None:
        st.subheader(f"Th√¥ng tin c·ªßa Member_number: {member_val}")
        st.dataframe(st.session_state["member_data"])
        st.write(f"**Member_number {member_val}** thu·ªôc **Cluster {st.session_state['predicted_cluster_member']}** - **{st.session_state['segment_name']}**.")

        if st.button("Hi·ªÉn th·ªã chi·∫øn l∆∞·ª£c kinh doanh (theo c·ª•m d·ª± ƒëo√°n)", key="strategy_member"):
            show_cluster_strategy(st.session_state["predicted_cluster_member"])
    elif "member_data" in st.session_state and st.session_state["member_data"] is None:
        st.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin c·ªßa Member_number n√†y trong d·ªØ li·ªáu.")

    st.markdown("### 4Ô∏è‚É£ Upload file to predict")

    st.markdown("üì§ T·∫£i l√™n file d·ªØ li·ªáu (CSV ho·∫∑c Excel)")
    st.markdown("‚ÑπÔ∏è **Required columns** in the uploaded file: `Name`, `Recency`, `Frequency`, `Monetary`")
    uploaded_file = st.file_uploader("Drag and drop file here", type=["csv", "xlsx"])

    if uploaded_file is not None:
        file_ext = uploaded_file.name.split('.')[-1]

        if file_ext == "csv":
            df_upload = pd.read_csv(uploaded_file)
        elif file_ext == "xlsx":
            df_upload = pd.read_excel(uploaded_file)
        else:
            st.error("‚ùå Ch·ªâ h·ªó tr·ª£ file CSV ho·∫∑c Excel (.xlsx)")
            st.stop()
        
        st.dataframe(df_upload)


        required_cols = {"Name", "Recency", "Frequency", "Monetary"}
        if required_cols.issubset(df_upload.columns):
            # Chu·∫©n h√≥a v√† d·ª± ƒëo√°n
            X = df_upload[["Recency", "Frequency", "Monetary"]]
            X_scaled = scaler.transform(X)
            cluster_preds = model.predict(X_scaled)
            df_upload["Predicted Cluster"] = cluster_preds

            # Th√™m nh√£n c·ª•m
            df_upload = df_upload.merge(
                df_segments[["Cluster Number", "Customer Segment"]],
                left_on="Predicted Cluster",
                right_on="Cluster Number",
                how="left"
            )
            # X√≥a c·ªôt d∆∞ th·ª´a
            df_upload.drop(columns=["Cluster Number"], inplace=True)

            st.write("### üìä K·∫øt qu·∫£ d·ª± ƒëo√°n:")
            st.dataframe(df_upload[["Name", "Recency", "Frequency", "Monetary", "Predicted Cluster", "Customer Segment"]])
        else:
            st.error("‚ö†Ô∏è File CSV ph·∫£i c√≥ ƒë·∫ßy ƒë·ªß c√°c c·ªôt: Name, Recency, Frequency, Monetary")

        import io

        csv = df_upload.to_csv(index=False, sep=";", encoding="utf-8")
        st.download_button(
            label="üì• T·∫£i k·∫øt qu·∫£ d·ª± ƒëo√°n xu·ªëng (.csv)",
            data=csv,
            file_name="ket_qua_du_doan.csv",
            mime="text/csv"
        )
